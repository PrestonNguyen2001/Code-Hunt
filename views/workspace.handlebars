<div class="workspace-container">
  <div class="left-container">
    <!-- Tabs -->
    <div class="tabs">
      <button class="tablink" id="description-tab" onclick="openTab(event, 'description')">Description</button>
      <button class="tablink" id="solution-tab" onclick="openTab(event, 'solution')">Solution</button>
    </div>

    <!-- Tab Content -->
    <div id="description" class="tabcontent">
      <div class="problem-description">
        <h1>{{problem.title}}</h1>
        <div class="difficulty {{difficultyClass problem.difficulty}}">
          {{problem.difficulty}}
        </div>
        <div class="problem-statement">{{{problem.problem_statement}}}</div>
        <h2>Examples</h2>
        {{#each problem.examples}}
          <div class="example">
            <h3>Example {{@index}}</h3>
            <p><strong>Input:</strong> {{{this.inputText}}}</p>
            <p><strong>Output:</strong> {{{this.outputText}}}</p>
            {{#if this.explanation}}
              <p><strong>Explanation:</strong> {{{this.explanation}}}</p>
            {{/if}}
          </div>
        {{/each}}

        <h2>Constraints</h2>
        <ul>{{{problem.constraints}}}</ul>
      </div>
    </div>

    <div id="solution" class="tabcontent">
      <div class="problem-solution">
        
        <h2>Steps to take:</h2>
       <p> <h3>Approach 1: Brute Force</h3></p>
       <li><strong>Algorithm</strong></li>

<p1>The brute force approach is simple. Loop through each element ùìç and find if there is another value that equals to ùìâùí∂ùìáùëîùëíùìâ‚àíùìç.</p1>

<li><strong>Complexity Analysis</strong></li>

<h4>‚Ä¢Time complexity:O(n^2).</h4> 
<p1>For each element, we try to find its complement by looping through the rest of the array which takes O(n) time. Therefore, the time complexity is 0(n^2).</p1>

<h4>‚Ä¢Space complexity: O(1).</h4>
<p1>The space required does not depend on the size of the input array, so only constant space is used.</p1>

Approach 2: Two-pass Hash Table
Intuition

To improve our runtime complexity, we need a more efficient way to check if the complement exists in the array. If the complement exists, we need to get its index. What is the best way to maintain a mapping of each element in the array to its index? A hash table.

We can reduce the lookup time from O(n)O(n)O(n) to O(1)O(1)O(1) by trading space for speed. A hash table is well suited for this purpose because it supports fast lookup in near constant time. I say "near" because if a collision occurred, a lookup could degenerate to O(n)O(n)O(n) time. However, lookup in a hash table should be amortized O(1)O(1)O(1) time as long as the hash function was chosen carefully.

Algorithm

A simple implementation uses two iterations. In the first iteration, we add each element's value as a key and its index as a value to the hash table. Then, in the second iteration, we check if each element's complement (target‚àínums[i]target - nums[i]target‚àínums[i]) exists in the hash table. If it does exist, we return current element's index and its complement's index. Beware that the complement must not be nums[i]nums[i]nums[i] itself!

Complexity Analysis

Time complexity: O(n)O(n)O(n).
We traverse the list containing nnn elements exactly twice. Since the hash table reduces the lookup time to O(1)O(1)O(1), the overall time complexity is O(n)O(n)O(n).

Space complexity: O(n)O(n)O(n).
The extra space required depends on the number of items stored in the hash table, which stores exactly nnn elements.

Approach 3: One-pass Hash Table
Algorithm

It turns out we can do it in one-pass. While we are iterating and inserting elements into the hash table, we also look back to check if current element's complement already exists in the hash table. If it exists, we have found a solution and return the indices immediately.

Complexity Analysis

Time complexity: O(n)O(n)O(n).
We traverse the list containing nnn elements only once. Each lookup in the table costs only O(1)O(1)O(1) time.

Space complexity: O(n)O(n)O(n).
The extra space required depends on the number of items stored in the hash table, which stores at most nnn elements.
        <pre><code>{{{problem.solution}}}</code></pre>
      </div>
    </div>
    <!-- Comment Section -->
    <div class="comment-section hidden" id="comment-section">
      <h2>Leave a Comment</h2>
      <form id="comment-form">
        <textarea id="comment-content" rows="3" placeholder="Write your comment here..."></textarea>
        <button type="submit" style="float: right;">Submit Comment</button>
      </form>
      <div id="comments-list"></div>
    </div>
    <!-- Feedback Section -->
    <div class="feedback-section">
      <div class="likes-container">
        <button class="feedback-btn" id="thumbs-up-toggle" aria-label="Thumbs up" data-ripple>
          <i class="fa-regular fa-thumbs-up thumbs-up-icon" aria-hidden="true"></i>
          <div class="state-layer"></div>
          <span id="likes-count">0</span> <!-- Likes counter -->
        </button>
        <button class="feedback-btn" id="thumbs-down-toggle" aria-label="Thumbs down" data-ripple>
          <i class="fa-regular fa-thumbs-down thumbs-down-icon" aria-hidden="true"></i>
          <div class="state-layer"></div>
          <span id="dislikes-count">0</span> <!-- Dislikes counter -->
        </button>
        <button class="feedback-btn" id="star-toggle" aria-label="Star" data-ripple>
          <i class="fa-regular fa-star star-icon" aria-hidden="true"></i>
          <div class="state-layer"></div>
        </button>
      </div>
      <div class="comments-container">
        <button class="feedback-btn" id="comment-toggle" aria-label="Comment" data-ripple>
          <i class="fa-regular fa-comment comment-bubble-icon" aria-hidden="true"></i>
          <div class="state-layer"></div>
        </button>
      </div>
    </div>
  </div>
  <div class="right-container">
    <div class="code-editor">
      <h2>Code</h2>
      <textarea id="codeEditor" rows="10" cols="50">{{problem.starter_code}}</textarea>
      <div class="editor-buttons">
        <button id="runCode"><i class="fa fa-play"></i> Run</button>
        <button id="submitCode"><i class="fa fa-check"></i> Submit</button>
      </div>
    </div>
    <div class="test-cases">
      <h2>Test Cases</h2>
      <div id="test-case-buttons">
        {{#each problem.examples}}
          <button class="test-case-btn" data-id="{{@index}}">Case {{@index}}</button>
        {{/each}}
      </div>
      {{#each problem.examples}}
        <div class="test-case" data-id="{{@index}}">
          <h3>Case {{inc @index}}</h3> <!-- Use helper to increment index by 1 -->
          <p><strong>Input:</strong> {{{this.inputText}}}</p>
          <p><strong>Output:</strong> <span class="output">{{this.outputText}}</span></p>
          <p><strong>Result:</strong> <span class="result"></span></p>
        </div>
      {{/each}}
    </div>
  </div>
  <!-- Modal -->
  <div id="modal" class="modal">
    <div class="modal-content">
      <span class="close">&times;</span>
      <p id="modal-message">Congrats! All Passed!</p>
    </div>
  </div>
</div>

<input type="hidden" id="problemId" value="{{problem.id}}">
<script type="module" src="/js/workspace.js"></script>
<script>
  function openTab(evt, tabName) {
    var i, tabcontent, tablinks;
    tabcontent = document.getElementsByClassName("tabcontent");
    for (i = 0; i < tabcontent.length; i++) {
      tabcontent[i].style.display = "none";
    }
    tablinks = document.getElementsByClassName("tablink");
    for (i = 0; i < tablinks.length; i++) {
      tablinks[i].className = tablinks[i].className.replace(" active", "");
    }
    document.getElementById(tabName).style.display = "block";
    evt.currentTarget.className += " active";
  }

  // Open the default tab
  document.getElementById("description-tab").click();
</script>
